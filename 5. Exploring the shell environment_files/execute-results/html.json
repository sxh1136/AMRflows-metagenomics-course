{
  "hash": "a022081da710b3e62ef5de418b73f148",
  "result": {
    "markdown": "---\ntitle: 4. Exploring Your Environment\n---\n\n\nNavigating Files and Directories\n\nNow that you've become acquainted with launching your command line interface and using shell, let's delve into the practical aspects - managing your files and directories.\nshell Commands: Your Swiss Army Knife\n\nConsider shell commands as the versatile tools in your digital toolbox. They empower you to perform an array of operations with your files and directories, from creating and deleting to moving and copying.\nListing Files\n\nOur first task is understanding what resides in the current directory:\n\n* Execute `ls` and press Enter. This command reveals a list of files and directories, akin to a quick inventory check.\n\n### Navigating the Terrain\n\nNext, let's master navigation within your digital domain:\n\n* Employ `cd` followed by a directory name, such as `cd` Documents, and press Enter. \n\n* If you ever find yourself disoriented and need to return to your starting point, simply type `cd` without any additional arguments and press Enter. \n\n### Location Awareness\n\nNot sure what directory you're in? Utilize this command:\n\n* Execute `pwd` (short for \"print working directory\") and press Enter. This will print your absolute path - more on that later.\n\n\n### File and Directory Management\n\nIt's time to take command of your system. Let's look at how to create and delete files and directories.\n\n#### Creating Files and Directories\n\n* To create a new directory, execute `mkdir` DirectoryName and press Enter. Replace DirectoryName with your desired name.\n\n* To generate a new text file, employ `touch` FileName.txt and press Enter. Insert your chosen name after FileName. It's akin to composing a new document.\n\n### Deleting Files and Directories\n\nFor housekeeping purposes, let's learn how to delete files and directories:\n\n* To delete a file, execute `rm` FileName.txt and press Enter. This is not reversable!\n\n*To eliminate an empty directory, type `rm -r` DirectoryName and press Enter.  This is not reversable!\n\n\n### Copying and Relocating\n\nNow, let's learn how to move and copy files.\n\n#### Copying Files and Directories\n\nTo duplicate a file, execute `cp` SourceFile.txt DestinationDirectory/ and press Enter. Substitute SourceFile with the file to be duplicated and DestinationDirectory with the target directory.\n\n```bash\ncp SourceFile.txt DestinationDirectory/\n```\n\n#### Moving Files and Directories\n\nTo transfer a file, employ `mv` SourceFile.txt DestinationDirectory/ and press Enter. \n\n```bash\nmv SourceFile.txt DestinationDirectory/\n```\n\n### Renaming Files and Directories\n\nOccasionally, you may want to rename your files and directories:\n\nTo rename a file, use again use the `mv` command, except this this we give it put its new name after the file name instead of a destination directory.\n\n```bash\nmv OldFileName.txt NewFileName.txt\n```\n    \nTo rename a directory, we do the same thing as with a file, but give it a new directory name:\n\n```bash\nmv OldDirectoryName/ NewDirectoryName/\n```\n\n### Viewing Files\n\nIn your research, you'll often need to inspect the content of files, whether they contain DNA sequences, metadata, or analysis results. Let's explore some essential commands for viewing the contents of files within your command-line environment.\n\n#### Viewing Text Files\n\nText files are frequently used in bioinformatics for storing data and information. To view the contents of a text file, you can use the following commands:\n\n* `cat`: This command displays the entire contents of a text file directly in your terminal. For instance, to view the contents of a file called `sequence.txt`, you would use:\n\n```bash\ncat sequence.txt\n```\n\n* `less`: This command allows you to view large text files one screen at a time, making it easier to navigate through lengthy documents. To use less, simply type:\n\n```bash\nless sequence.txt\n```\n\nYou can navigate through the file using the arrow keys and exit by pressing q.\n\n\n* `head` and `tail`: These commands display the first or last few lines of a file, respectively. For example, to view the first 10 lines of a file:\n```bash\nhead -n 10 sequence.txt\n```\n\nTo view the last 20 lines of a file:\n```bash\ntail -n 20 sequence.txt\n```\n\n### Understanding Absolute and Relative Paths\n\nWhen navigating your metagenomic environment, it's crucial to understand how to specify the location of files and directories accurately. This is where the concepts of absolute and relative paths come into play.\n\n#### Absolute Paths\n\nAn absolute path provides the complete and unambiguous location of a file or directory in the file system, starting from the root directory. In Unix-like systems, the root directory is represented by a forward slash (`/`).\n\nFor example, if your home directory is `/home/username` and you want to view a file called `data.txt` located in the Documents directory within your home directory, you would use the absolute path like this:\n\n```bash\nless /home/username/Documents/data.txt\n```\n\nAbsolute paths are useful when you need to access files or directories from anywhere in the file system, regardless of your current working directory. They specify the precise location without any ambiguity.\n\n#### Relative Paths\n\nIn contrast, relative paths specify the location of a file or directory relative to your current working directory. They are typically shorter and more convenient to use when you are navigating within a specific branch of your file system.\n\nHere are some examples of relative paths:\n\n* To view the `data.txt` file in your current directory, you can simply use its name:\n\n```bash\nless data.txt\n```\n\n* To access a file or directory in a subdirectory, you can use a path relative to your current directory. For instance, to view the `config.txt` file in a directory called `settings` located within your current directory:\n\n```bash\nless settings/config.txt\n```\n\n\n* To move up one directory level, you can use `..`. For example, if you are in the `settings` directory and want to view  a file in the parent directory:\n\n```bash\nless ../parentfile.txt\n```\n\nRelative paths are handy when you are working within a specific context, such as organizing files within a project directory.\n\n### Recap and Application\n\nThat was quite a bit to digest, but don't fret if you can't recall everything immediately. The most effective way to become proficient is through practice.\n\n#### Exercise \n\n* Create a new directory called \"Metagenomics_Project.\"\n* Move into the new directory\n* Generate a new text file named \"SampleData.txt.\"\n* Relocate the \"SampleData.txt\" file to your home directory (the starting location when you open your command line). \n* Modify the file's name to \"MyData.txt.\"\n* List the contents of your home directory to verify that everything is in its rightful place.\n\n\n```{default}\n#| code-fold: true\n#| code-summary: \"Answers to exercise\"\nmkdir Metagenomics_Project\ncd Metagenomics_Project\ntouch SampleData.txt\nmv SampleData.txt ../\nmv SampleData.txt MyData.txt\nls\n```\n\n\nCongratulations! You've just explored the fundamentals of managing files and directories using the command line. In the upcoming section, we'll delve deeper into bioinformatic tools and how to install them.\n\n\n",
    "supporting": [
      "5. Exploring the shell environment_files"
    ],
    "filters": [],
    "includes": {}
  }
}